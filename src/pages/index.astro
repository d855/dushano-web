---
import ArticleCard from "../components/ArticleCard.astro";
import Metadata from "../components/Metadata.astro";
import Layout from "../layouts/Layout.astro";

interface BlogPost {
	frontmatter: {
		title: string;
		publishDate: string;
	};
	file: string;
	content: string;
}

const postImports = import.meta.glob("../blog/*.md");
const posts = await Promise.all(
    Object.entries(postImports).map(async ([path, resolver]) => {
        const post = await resolver() as any;
        return {
            ...post,
            file: path,

            content: post.rawContent ? post.rawContent() : post.compiledContent ? post.compiledContent() : '',
        };
    }),
);

const sortedPosts = posts.sort(
    (a: BlogPost, b: BlogPost) =>
        new Date(b.frontmatter.publishDate).valueOf() -
        new Date(a.frontmatter.publishDate).valueOf(),
).slice(0, 3);
---

<Layout title="Dušan Osmokrović">
	<Metadata title="Home"
			  canonicalUrl="google.rs"
			  type="website"
			  slot="head"/>
	<h1 class="text-4xl">Software Engineer</h1>

	<div class="font-sm">
		<p class="mt-2 font-sm">
			Hi, I’m Dušan.
			I build things for the web, teach what I know, and try to keep things simple.
		</p>

		<p>
			That’s pretty much it.
		</p>

		<p class="mt-2">
			Most of my time goes into real-world projects where reliability matters more than buzzwords.
			I’m always looking for better ways to solve problems without overcomplicating things.
		</p>
	</div>


	<section class="my-10">
		<h2 class="uppercase">Most recent</h2>

		<div class="mt-3 grid grid-cols-1 gap-2 divide-y divide-neutral-300 dark:divide-neutral-600">
            {
                sortedPosts.map((post: BlogPost) => (
						<ArticleCard title={post.frontmatter.title}
									 publishDate={post.frontmatter.publishDate}
									 content={post.content}
									 url={`/posts/${post.file.split("/").pop()?.replace(".md", "") ?? ''}`}/>
                ))
            }
		</div>
	</section>
</Layout>
